// Generated by CoffeeScript 1.6.2
var SOCKET_INSTANCE_ALIASES, SOCKET_INSTANCE_PROPERTIES_PRIVATE, SOCKET_INSTANCE_PROPERTIES_PUBLIC, app, connect, request, sselib, test;

request = require('supertest');

connect = require('connect');

sselib = require('../sselib');

SOCKET_INSTANCE_PROPERTIES_PUBLIC = ['sendComment', 'sendRetry', 'sendEvent', 'sendId', 'sendData', 'sendRaw'];

SOCKET_INSTANCE_PROPERTIES_PRIVATE = ['_processMessage', '_dispatchMessage', '_writeHeaders', '_keepAlive'];

SOCKET_INSTANCE_ALIASES = {
  pub: '_dispatchMessage',
  publish: '_dispatchMessage',
  send: '_dispatchMessage'
};

describe('SSE', function() {
  describe('comment()', function() {
    return it('should return a valid comment', function() {
      return sselib.comment('cat').should.equal(':cat\n\n');
    });
  });
  describe('retry()', function() {
    return it('should return a valid retry instruction', function() {
      return sselib.retry(3000).should.equal('retry: 3000\n');
    });
  });
  describe('event()', function() {
    return it('should return a valid event record', function() {
      return sselib.event('cat').should.equal('event: cat\n');
    });
  });
  describe('id()', function() {
    return it('should return a valid id record', function() {
      return sselib.id('cat').should.equal('id: cat\n');
    });
  });
  return describe('data()', function() {
    return it('should return a valid data record', function() {
      return sselib.data('cat').should.equal('data: cat\n\n');
    });
  });
});

test = function(app, signature) {
  return describe(signature, function() {
    return describe('when recv accept header text/event-stream', function() {
      return it('should respond to event-stream accept headers', function(done) {
        return request(app).get('/').set('Accept', 'text/event-stream').expect(200).expect('Content-Type', /text\/event-stream/).end(function(err, res) {
          if (err) {
            return done(err);
          }
          return done();
        });
      });
    });
  });
};

app = connect();

app.use(sselib.middleware({
  keepAlive: 3 * 1000,
  retry: 10 * 1000
}));

test(app, "sselib.middleware()");
