// Generated by CoffeeScript 1.6.2
var Mock, SOCKET_INSTANCE_ALIASES, SOCKET_INSTANCE_OPTIONS_KEYS, SOCKET_INSTANCE_PROPERTIES_PRIVATE, SOCKET_INSTANCE_PROPERTIES_PUBLIC, app, connect, request, sselib, test;

request = require('supertest');

connect = require('connect');

sselib = require('../sselib');

Mock = function() {
  var _this = this;

  this.req = {};
  this.req.headers = {};
  this.req.url = "http://example.com/";
  this.req.headers['last-event-id'] = "keyboard-cat";
  this.res = {};
  this.res.headers = {};
  this.res.setHeader = function(k, v) {
    return _this.res.headers[k] = v;
  };
  this.res.once = function() {};
  this.res.write = function(chunk, encoding) {};
  return this;
};

SOCKET_INSTANCE_PROPERTIES_PUBLIC = ['sendComment', 'sendRetry', 'sendEvent', 'sendId', 'sendData', 'sendRaw'];

SOCKET_INSTANCE_PROPERTIES_PRIVATE = ['_processMessage', '_dispatchMessage', '_writeHeaders', '_keepAlive'];

SOCKET_INSTANCE_ALIASES = ['pub', 'publish', 'send'];

SOCKET_INSTANCE_OPTIONS_KEYS = ['keepAlive', 'retry'];

describe('SSE', function() {
  describe('comment()', function() {
    return it('should return a valid comment', function(done) {
      sselib.comment('cat').should.equal(':cat\n\n');
      return done();
    });
  });
  describe('retry()', function() {
    return it('should return a valid retry instruction', function(done) {
      sselib.retry(3000).should.equal('retry: 3000\n');
      return done();
    });
  });
  describe('event()', function() {
    return it('should return a valid event record', function(done) {
      sselib.event('cat').should.equal('event: cat\n');
      return done();
    });
  });
  describe('id()', function() {
    return it('should return a valid id record', function(done) {
      sselib.id('cat').should.equal('id: cat\n');
      return done();
    });
  });
  return describe('data()', function() {
    return it('should return a valid data record', function(done) {
      sselib.data('cat').should.equal('data: cat\n\n');
      return done();
    });
  });
});

describe('Initialized SSE', function() {
  var instance, mock, options;

  options = {
    keepAlive: false
  };
  mock = new Mock();
  instance = new sselib(mock.req, mock.res, options);
  describe('The options passed should take effect on the instance', function() {
    it('should have all the keys', function(done) {
      instance.socket.options.should.have.keys(SOCKET_INSTANCE_OPTIONS_KEYS);
      return done();
    });
    it('should have the passed value for keepAlive', function(done) {
      instance.socket.options.should.have.property('keepAlive', false);
      return done();
    });
    return it('should have the default value for retry', function(done) {
      instance.socket.options.should.have.property('retry', 5 * 1000);
      return done();
    });
  });
  describe('The socket object should have all the public properties', function() {
    return SOCKET_INSTANCE_PROPERTIES_PUBLIC.forEach(function(property) {
      return it('should have #{ property }', function(done) {
        instance.socket.should.have.property(property);
        return done();
      });
    });
  });
  describe('The socket object should have all the private properties', function() {
    return SOCKET_INSTANCE_PROPERTIES_PRIVATE.forEach(function(property) {
      return it('should have #{ property }', function(done) {
        instance.socket.should.have.property(property);
        return done();
      });
    });
  });
  return describe('The socket object should have all the aliases', function() {
    return SOCKET_INSTANCE_ALIASES.forEach(function(property) {
      return it('should have #{ property }', function(done) {
        instance.socket.should.have.property(property);
        return done();
      });
    });
  });
});

test = function(app, signature) {
  return describe(signature, function() {
    return describe('when recv accept header text/event-stream', function() {
      return it('should respond to event-stream accept headers', function(done) {
        return request(app).get('/').set('Accept', 'text/event-stream').expect(200).expect('Content-Type', /text\/event-stream/).end(function(err, res) {
          if (err) {
            return done(err);
          }
          return done();
        });
      });
    });
  });
};

app = connect();

app.use(sselib.middleware({
  keepAlive: false,
  retry: 10 * 1000
}));

test(app, "sselib.middleware()");
